<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Tic Tac Toe</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      text-align: center;
      margin-top: 50px;
    }
    .board {
      display: grid;
      grid-template-columns: repeat(3, 100px);
      grid-gap: 5px;
      margin: 0 auto;
      width: 310px;
    }
    .cell {
      width: 100px;
      height: 100px;
      font-size: 2em;
      cursor: pointer;
      display: flex;
      align-items: center;
      justify-content: center;
      background-color: #f0f0f0;
      border: 2px solid #ccc;
    }
    .cell:hover {
      background-color: #e0e0e0;
    }
    #status {
      margin-top: 20px;
      font-size: 1.2em;
    }
    #reset {
      margin-top: 10px;
      padding: 10px 20px;
      font-size: 1em;
    }
  </style>
</head>
<body>

  <h1>Tic Tac Toe</h1>
  <div class="board" id="board"></div>
  <div id="status"></div>
  <button id="reset">Restart Game</button>

  <script>
    const board = document.getElementById("board");
    const status = document.getElementById("status");
    const resetButton = document.getElementById("reset");

    let currentPlayer = "X";
    let gameBoard = ["", "", "", "", "", "", "", "", ""];
    let gameActive = true;

    function renderBoard() {
      board.innerHTML = "";
      gameBoard.forEach((value, index) => {
        const cell = document.createElement("div");
        cell.classList.add("cell");
        cell.textContent = value;
        cell.addEventListener("click", () => handleMove(index));
        board.appendChild(cell);
      });
    }

    function handleMove(index) {
      if (!gameActive || gameBoard[index]) return;
      gameBoard[index] = currentPlayer;
      renderBoard();
      if (checkWin()) {
        status.textContent = `Player ${currentPlayer} wins!`;
        gameActive = false;
      } else if (!gameBoard.includes("")) {
        status.textContent = "It's a draw!";
        gameActive = false;
      } else {
        currentPlayer = currentPlayer === "X" ? "O" : "X";
        status.textContent = `Player ${currentPlayer}'s turn`;
      }
    }

    function checkWin() {
      const winPatterns = [
        [0, 1, 2], [3, 4, 5], [6, 7, 8], // rows
        [0, 3, 6], [1, 4, 7], [2, 5, 8], // cols
        [0, 4, 8], [2, 4, 6]             // diagonals
      ];
      return winPatterns.some(pattern => {
        const [a, b, c] = pattern;
        return gameBoard[a] && gameBoard[a] === gameBoard[b] && gameBoard[a] === gameBoard[c];
      });
    }

    resetButton.addEventListener("click", () => {
      gameBoard = ["", "", "", "", "", "", "", "", ""];
      currentPlayer = "X";
      gameActive = true;
      status.textContent = `Player ${currentPlayer}'s turn`;
      renderBoard();
    });

    renderBoard();
    status.textContent = `Player ${currentPlayer}'s turn`;
  </script>

</body>
</html>
